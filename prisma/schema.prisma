// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  EMAIL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum Role {
  ADMIN
  OWNER
  USER
}

model User {
  id            String         @id() @default(uuid())
  isDeleted     Boolean        @default(false) @map("is_deleted")
  fullName      String         @db.VarChar(1024)
  email         String         @unique
  passwordHash  String         @map("password_hash") @db.VarChar(256)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  lastLogin     DateTime       @map("last_login")
  provider      Provider
  tasks         Task[]
  assignedTasks AssignedTask[]
  role          Role           @default(ADMIN)
  teamId        String?        @map("team_id")
  team          Team?          @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([email])
  @@map("users")
}

model AssignedTask {
  id            String   @id() @default(uuid())
  taskId        String   @unique @map("task_id")
  task          Task     @relation(fields: [taskId], references: [id])
  assigneeEmail String?  @map("assignee_email")
  assignee      User?    @relation(fields: [assigneeEmail], references: [email])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([taskId, assigneeEmail])
  @@index([taskId])
  @@index([assigneeEmail])
  @@map("assigned_tasks")
}

model Task {
  id           String        @id() @default(uuid())
  isDeleted    Boolean       @default(false) @map("is_deleted")
  title        String        @db.VarChar(1024)
  description  String        @db.VarChar(4096)
  status       TaskStatus    @default(PENDING)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  creatorEmail String        @map("creator_email")
  creator      User          @relation(fields: [creatorEmail], references: [email])
  assignedTo   AssignedTask?
  workspaceId  String?       @map("workspace_id")
  workspace    Wrokspace?    @relation(fields: [workspaceId], references: [id])

  @@index([creatorEmail])
  @@index([status])
  @@map("tasks")
}

model Team {
  id         String      @id() @default(uuid())
  isDeleted  Boolean     @default(false) @map("is_deleted")
  name       String      @db.VarChar(1024)
  createdAt  DateTime    @default(now()) @map("crated_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  users      User[]
  workspaces Wrokspace[]

  @@map("teams")
}

model Wrokspace {
  id        String   @id() @default(uuid())
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @db.VarChar(1024)
  icon      String?  @db.VarChar(1024)
  teamId    String   @map("team_id")
  team      Team     @relation(fields: [teamId], references: [id])
  tasks     Task[]

  @@index([name])
  @@index([teamId])
  @@map("workspaces")
}
